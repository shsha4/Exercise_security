<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <context:component-scan base-package="com.exercise.*"/>
    <!-- bcrtpt 인코딩 객체 의존성 주입 -->
    <beans:bean id="passwordEncoder"
                class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"  />
    <!-- custom login userservice 의존성 주입 -->
    <beans:bean id="customUserService" class="com.exercise.security.CustomUserDetailsService" />


    <!-- auto-config 기본 로그인 폼 사용, SpEL 사용 -->
    <http auto-config='true' use-expressions="true">

        <!-- use-expressions="true"로 SpEL 사용을 허용했다면 반드시 해당 언어로 작성 -->
        <!-- 권한 순서는 위에서부터 아래로 위부터 적용 -->
        <!--<intercept-url pattern="/login" access="permitAll" />
        <intercept-url pattern="/resources/**" access="permitAll" />
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />-->

        <intercept-url pattern="/user/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')"/>
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="permitAll()"/>

        <!-- 사용자 이름과 비밀번호를 가지고있는 폼 기반 인증방법 사용 -->
        <form-login login-page="/loginPage"
                    login-processing-url="/login"
                    default-target-url="/user"
                    username-parameter="id"
                    password-parameter="pw"
                    authentication-failure-url="/login?error"
                    always-use-default-target='true'/>
        <!--
            login-page : 로그인 페이지 설정
            login-processing-url : 로그인 Action URL
            default-target-url : 로그인 성공시 이동할 페이지 설정
            username, password parameter : 로그인 이름과 패스워드 파라미터 설정 (필수 사항 아님) 로그인 폼 태그와 name이 일치해야 함
            authentication-failure-url : 로그인 실패시 이동 페이지 (error 파라미터를 보내준다)
            always-use-default-target : 로그인 성공시 default-target-url로 보낼지 설정 (true, false)
        -->

        <!-- 로그 아웃 시 세션 초기화 -->
        <logout invalidate-session="true" logout-url="/logout" logout-success-url="/loginPage"/>
        <!--
            logout-url : 로그아웃 URL
            logout-success-url : 로그아웃 성공시, 이동할 URL. (default: /login?logout)
            invalidate-session : 로그아웃 시, session을 무효화할 지 선택. (default: true)
            delete-cookies : 로그아웃 성공시, 삭제할 쿠키 이름 지정
            success-handler-ref : 로그아웃 성공시, logout-success-url 이 아닌 핸들러로 리다이렉트
        -->

        <!-- csrf 토큰 값 사용 -->
        <csrf disabled="false"/>
    </http>

    <!-- 인증 처리를 위한 최상위 태그 -->
    <authentication-manager>
        <!-- Mybatis 이용 -->
        <authentication-provider user-service-ref="customUserService">
            <password-encoder hash="bcrypt"/>
        </authentication-provider>

        <!-- JDBC 이용 -->
        <!--<authentication-provider>
            <password-encoder hash="bcrypt"/>
            <jdbc-user-service data-source-ref="dataSource"
                                        users-by-username-query="SELECT user_id as id, user_pw as pw, enabled from user_info where user_id = ?"
                                        authorities-by-username-query="SELECT user_id as id, user_pw as pw, auth as authority FROM user_info where user_id = ?"
            />
        </authentication-provider>-->
        <!--
            dataSource : root-context.xml 등록된 dataSource bean
            user-by-username-query : 존재하는 유저인지 확인, user_id, user_pw, enabled 컬럼 필요
            authorities-by-username-query : 유저의 권한 확인 authority 컬럼에 권한 값 필요
         -->

        <!-- 인메모리로 바로 적어줄 수 있다 -->
        <!--<authentication-provider>
            <user-service>
                <user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
                <user name="user" password="{noop}user" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>-->

    </authentication-manager>

</beans:beans>
